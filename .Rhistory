tbeta0 <- beta0/sebeta0
tbeta1 <- beta1/sebeta1
source('~/2Data Science/Data/Example - LM.R')
lm(y ~ x)
fit1 <- lm(y~x)
summary(fit1)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit2 <- lm(y~x)
summary(fit2)
predict(fit2,mean(x))
mean(x)
37.2851 -5.3445*mean(x)
show(mtcars)
3.046*1.96
sqrt(3.046*1.96)
qt(.025,30)
sqrt(3.046)*qt(0.025,30)
37.2851 -5.3445*3
fit3 <- lm(y ~ x/2)
x1 <- x/2
fit3 <- lm(y ~ x1)
summary(fit3)
sum(fit1$residuals)
sum(fit2$residuals)
sum(fit3$residuals)
fit4 <- lm(y ~x -1)
summary(fit4)
sum(fit4$residuals)
swirl()
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
lm(gch_nor ~ gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(galton$child ~ galton$parent)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu = mean(galton$child)
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
swirl()
lm(child ~ 1, galton)
view(trees)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
myData <- data (mtcars)
View(mtcars)
myData <- mtcars
?mtcars
fit <- lm(mgp ~ cyl + wt, mtcars)
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)
View(mtcars)
fitNoWt <- lm(mpg ~ cyl, mtcars)
summary(fitNoWt)
fitInteraction <- lm(mpg ~ cyl * wt, mtcars)
summary(fitInteraction)
anova(fit,fitInteraction)
fitInteraction2 <- lm(mpg ~ factor(cyl) * wt, mtcars)
summary(fitInteraction2)
fit <- lm(mgp ~ factor(cyl) + wt, mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fitNoWt <- lm(mpg ~ factor(cyl), mtcars)
summary(fitNoWt)
fitInteraction <- lm(mpg ~ factor(cyl) * wt, mtcars)
anova(fit,fitInteraction)
summary(fitInteraction)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
hatvalues(fit5)
dfbetas(fit5)
lm.influence(fit5)
pairs(mtcars, panel = panel.smooth, main = "Motor Trends Cars")
pairs(mtcars, panel = panel.smooth, main = "Motor Trends Cars")
cor(mtcars)
cor(mtcars)[1,]
cor(mtcars)[1,"am"]
lm(mpg,am,data=mtcars)
lm(mpg ~ am,data=mtcars)
lm(mpg ~ factor(am),data=mtcars)
factor(1)
factor(mtcars.am)
factor(mtcars$am)
lm(mpg ~ factor(am)-1,data=mtcars)
fitSimple <- lm(formula = mpg ~ factor(am), data = mtcars)
summary(fitSimple)
coeff(fitSimple)
coef(fitSimple)
coef(fitSimple)[2]
plot(residuals(fitSimple))
cor(mtcars)[1,]
fitSimple <- lm(formula = mpg ~ factor(am), data = mtcars)
summary(fitSimple)
fitPower <- lm(formula = mpg ~ factor(am) + factor(cyl) + disp + hp, data = mtcars)
summary(fitPower)
anova(fitSimple,fitPower)
summary(fitSimple)$Coeff
summary(fitSimple)$Coef
summary(fitSimple)$Coefficient
summary(fitSimple)$coef
plot(fitSimple$residuals)
plot(fitSimple$residuals, title="Residuals of fit of MPG on Transmission type", ylab="Residual")
par(mfrow=c(2,2))
plot(fitSimple)
fitFull <- lm(formula = mpg ~ factor(am) + hp + drat + wt + qsec + vs + gear + carp, data = mtcars)
summary(fitFull)$coef
fitFull <- lm(formula = mpg ~ factor(am) + hp + drat + wt + qsec + vs + gear + carb, data = mtcars)
summary(fitFull)$coef
fitFull <- lm(formula = mpg ~ factor(am) + hp + drat + wt + qsec + factor(vs) + factor(gear) + factor(carb), data = mtcars)
summary(fitFull)$coef
fitSimple <- lm(formula = mpg ~ factor(am), data = mtcars)
fitPower <- lm(formula = mpg ~ factor(am) + factor(cyl) + disp + hp, data = mtcars)
fitFull <- lm(formula = mpg ~ factor(am) + hp + drat + wt + qsec + factor(vs) + factor(gear) + factor(carb), data = mtcars)
fitFulls <- lm(formula = mpg ~ factor(am) + hp + drat + wt + qsec + factor(vs) + gear + carb, data = mtcars)
summary(fitFulls)
cor(mtcars)
round(cor(mtcars)[1,"am"], digits=2)
r round(coef(fitSimple)[2], digits=3)
round(coef(fitSimple)[2], digits=3)
par(mfrow=c(2,2))
plot(fitFull)
fitFull <- lm(formula = mpg ~ factor(am) + hp + drat + wt + qsec + factor(vs) + gear + carb, data = mtcars)
fitFull <- lm(formula = mpg ~ factor(am) + hp + drat + wt + qsec + factor(vs) + gear + carb, data = mtcars)
par(mfrow=c(2,2))
plot(fitFull)
library(mass)
?shuttle
library(MASS)
View(shuttle)
myData <- shuttle
lm(use ~ wind, myData)
logReg <- glm(use ~ wind, myData, family="binomial")
summary(logReg)
myData <- mutate(myData, use_bi = 1)
library(dplyr)
myData <- mutate(myData, use_bi = 1)
View(myData)
myData[myData[,7]=="noauto"] = 0
myData[,7]
myData[,7]=="noauto"
myData[myData[,7]=="noauto",8] = 0
View(myData)
logReg <- glm(use ~ wind, myData, family="binomial")
logReg <- glm(use_bi ~ wind, myData, family="binomial")
summary(logReg)
e(0.158)
exp(0.158)
exp(0.2513)
1/0.031
exp(0.2513+0.03181)
logRegMag <- glm(use_bi ~ wind + magn, myData, family="binomial")
summary(logRegMag)
exp(3.635e-01 + 3.201e-02)
logRegInv <- glm((1-use_bi) ~ wind + magn, myData, family="binomial")
summary(logRegInv)
logRegInv <- glm((1-use_bi) ~ wind, myData, family="binomial")
summary(logRegInv)
myData2 <- spray
myData2 <- InsectSprays
View(myData2)
sprayReg <- glm(count ~ factor(spray), myData2, family="poisson")
summary(sprayReg)
exp(0.05588)
1/exp(0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
splineTerms <- (x > 0) * (x)
View(splineTerms)
splineTerms <- sapply(c(-5,0,5), function(knot) (x>knot)*(x-knot))
View(splineTerms)
xMat <- cbind(1, x, splineTerms)
View(xMat)
yhat <- predict(lm(y ~ xMat -1))
lines(x,yhat)
lm(y ~ xMat -1)
summary(lm(y ~ xMat -1))
summary(lm(y ~ xMat))
1/1.327
View(myData)
myData$wind <- as.numeric(shuttle$wind == "head")
View(myData)
logReg <- glm(use ~ wind, myData, family="binomial")
summary(logres)
summary(logRes)
summary(logReg)
exp(0.03181)
logRegMag <-  glm(use ~ wind + magn, myData, family="binomial")
summay(logRegMag)
summary(logRegMag)
exp(0.03201)
logReg <- glm(use ~ wind -1, myData, family="binomial")
summary(logReg)
exp(-0.2513)
logReg <- glm(use ~ wind, myData, family="binomial")
summary(logReg)
exp(1/0.03181)
exp(0.03181)
exp(1-0.03181)
summary(logRegMag)
exp(-0.39552+0.03201)
logReg <- glm(use_bi ~ wind, myData, family="binomial")
summary(logReg)
exp(-0.03181)
logRegMag <- glm(use_bi ~ wind + magn, myData, family="binomial")
summary(glm(use_bi ~ wind + magn, myData, family="binomial"))
summary(glm(use_bi ~ wind + factor(magn), myData, family="binomial"))
exp(-3.201e-02 )
spam {kernlab}
spam(kernlab)
library(kernlab)
install.packages("kernlab")
library(kernlab)
myData <- spam
head(spam)
data(spam)
head(spam)
plot(density(spam$your[spam&type=="nonspam"]),col="blue",main="",xlab="Frequency of 'your'")
spam&type=="nonspam"
spam&type="nonspam"
plot(density(spam$your[spam$type=="nonspam"]),col="blue",main="",xlab="Frequency of 'your'")
lines(density(spam$yor[spam$type=="spam"]),col="red")
lines(density(spam$your[spam$type=="spam"]),col="red")
prediction <- ifelse(spam$your > 0.5,"spam","nonspam")
table(prediction,spam$type)/length(spam$type)
install.packages("caret")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=075, list=false)
inTrain <- createDataPartition(y=spam$type,p=0.75, list=false)
inTrain <- createDataPartition(y=spam$type,p=0.75, list=FALSE)
training <- spam(inTrain,)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
install.packages("e1071")
modelFit <- train(type ~., data=training, method="glm")
warnings()
modelFit
modelFit$finalModel
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((smap$type=="spam")*1+1)
typeColor <- ((spam$type=="spam")*1+1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
View(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainIndex
dim(trainIndex)
len(trainIndex)
length(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(concrete$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, color=training$flyAsh)
View(concrete)
plot(training$CompressiveStrength, color=training$lyAsh)
plot(training$CompressiveStrength, color=training$FlyAsh)
plot(training$CompressiveStrength, colour=training$FlyAsh)
warnings()
qplot(CompressiveStrength,Index,colour=FlyAsh,data=training)
qplot(CompressiveStrength,colour=FlyAsh,data=training)
plot(training$CompressiveStrength, col=training$FlyAsh)
training$FlyAshCut <- cut2(training$FlyAsh,10)
library(Hmisc)
training$FlyAshCut <- cut2(training$FlyAsh,10)
View(training)
plot(training$CompressiveStrength, col=training$FlyAshCut)
training$FlyAshCut <- cut2(training$FlyAsh,g=10)
View(training)
plot(training$CompressiveStrength, col=training$FlyAshCut)
plot(training$CompressiveStrength, col=training$Age)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticizer,data=training)
hist(training$SuperPlasticizer)
hist(training$SuperPlasticizer*1)
hist(training$SuperPlasticizer*1, breaks = 5)
hist(training$SuperPlasticizer*1.0, breaks = 5)
hist(training$Superplasticizer*1.0, breaks = 5)
hist(training$Superplasticizer*1.0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
names(training)
grep("^IL",names(training))
ILVars <- Training[,c(1,grep("^IL",names(training)))]
ILVars <- training[,c(1,grep("^IL",names(training)))]
View(ILVars)
ILVars <- training[,c(grep("^IL",names(training)))]
princData <- prcomp(ILVars)
princData
preProcess(ILVars,method="pca",pcscomp=2)
preProcess(ILVars,method="pca",thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILVars <- training[,c(1,grep("^IL",names(training)))]
notPCA <- train(dignosis ~.,data=ILVars,method="glm")
notPCA <- train(diagnosis ~.,data=ILVars,method="glm")
notPCA
View(ILVars)
preProc < preProcess(ILVars,method="pca",thresh=0.8)
preProc <- preProcess(ILVars,method="pca",thresh=0.8)
preProc <- preProcess(ILVars[,c(2:12)],method="pca",thresh=0.8)
preProc <- preProcess(ILVars[,c(2:13)],method="pca",thresh=0.8)
trainPC <- predict(preProc,training[,-1])
trainPC <- predict(preProc,log10(training[,-1]+1))
trainPC <- predict(preProc,log10(ILVars[,-1]+1))
testPcaFit <- predict(preProc,log10(test[,-1]+1))
testPcaFit <- predict(preProc,log10(testing[,-1]+1))
testILVars <- testing[,c(1,grep("^IL",names(testing)))]
testPcaFit <- predict(preProc,log10(testILVars[,-1]+1))
testPcaFit
View(testILVars)
notPCA
yesPCA <- train(diagnosis ~.,data=trainPC,method="glm")
View(trainPC)
yesPCA <- train(diagnosis ~.,data=preProc,method="glm")
prComp <- prcomp(ILVars[,-1])
prComp
prComp <- prcomp(ILVars[,-1], thresh=0.8)
prComp
preProcess(ILVars,method="pca",thresh=0.8)
preProcess(ILVars[,-1],method="pca",thresh=0.8)
PCAPreProc <- preProcess(ILVars[,-1],method="pca",thresh=0.8)
PCAPreProc$rotation
step2 <- predict(PCAPreProc,ILVars[,-1])
yesPCA <- train(diagnosis ~.,data=step2,method="glm")
View(step2)
step2$diagnosis <- ILVars&disgnosis
step2$diagnosis <- ILVars&diagnosis
View(step2)
step3 <- predict(PCAPreProc,ILVars)
step3 <- predict(PCAPreProc,ILVars[,-1])
View(predictors)
mutate(step3,diagnosis = ILVars$diagnosis)
library(dplyr)
mutate(step3,diagnosis = ILVars$diagnosis)
step3$diagnosis = 1
step3 <- data.table(step2,ILVars$diagnosis)
step3 <- data.frame(step2,ILVars$diagnosis)
View(step3)
yesPCA <- train(diagnosis ~.,data=step3,method="glm")
yesPCA <- train(ILVars.diagnosis ~.,data=step3,method="glm")
yesPCA
testPC <- predict(preProc,step3)
testPC <- predict(prComp,step3)
testPC <- predict(PCAPreProc,step3)
step3 <- predict(PCAPreProc,TestILVars[,-1])
step3 <- predict(PCAPreProc,testILVars[,-1])
confusionMatrix(testing$diagnosis,predict(yesPCA,step3))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
tTrain <- segmentationOriginal[Case==Train,]
tTrain <- segmentationOriginal[segmentationOriginal$Case=="Train",]
tTest <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed=125
set.seed(125)
myFit <- train(Cell~.,tTrain,method=rpart)
myFit <- train(Cell~.,data=tTrain,method="rpart")
myFit <- train(Class~.,data=tTrain,method="rpart")
print(myFit$finalModel)
plot(myFit$finalModel, uniform=TRUE, main="Classification Tree")
plot(myFit$finalModel, uniform=TRUE, main="Classification Tree")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
myFit <- train(Area~.,data=olive,method="rpart")
print(myFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
predict(myFit,newdata)
OtherFit <- train(Area~.,data=olive,method="tree")
predict.rpart(myFit,newdata)
predict(myFit,newdata, type="matrix")
predict(myFit,newdata, type="raw")
predict(myFit,newdata, type="prob")
tree(myFit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(trainSA)
set.seed(13234)
train(chd~.,method="glm", family="binomial")
train(chd~.,data=trainSA,method="glm", family="binomial")
myFit <- train(chd~c(age, alcohol, obesity, tabacco, typea, ldl),data=trainSA,method="glm", family="binomial")
myFit <- train(chd~c(age, alcohol, obesity, tobacco, typea, ldl),data=trainSA,method="glm", family="binomial")
myFit <- train(chd~ age + alcohol + obesity + tobacco + typea + ldl),data=trainSA,method="glm", family="binomial")
myFit <- train(chd~ age + alcohol + obesity + tobacco + typea + ldl,data=trainSA,method="glm", family="binomial")
set.seed(13234)
myFit <- train(chd~ age + alcohol + obesity + tobacco + typea + ldl,data=trainSA,method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(myFit,trainSA))
missClass(testSA$chd,predict(myFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
View(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
myRfFit <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
varImp(myRfFit)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot()
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(devTools)
install.packages("Rtools")
library(slidify)
setwd(".//2Data Science//DevelopingDataProducts//Slides//Example_Training")
library(slidifyLibraries)
publish(title = 'DevelopingDataProductsSlides', 'index.html', host = 'rpubs')
library(knitr)
publish(title = 'DevelopingDataProductsSlides', 'index.html', host = 'rpubs')
install.packages("curl")
publish(title = 'DevelopingDataProductsSlides', 'index.html', host = 'rpubs')
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
